import { Injectable, NestMiddleware, OnModuleInit } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Provider as lti } from 'ltijs';
import { Request, Response } from 'express';

@Injectable()
export class LtiMiddleware implements NestMiddleware, OnModuleInit {
  constructor(private readonly configService: ConfigService) {}

  async onModuleInit() {
    // Method used to setup and configure the LTI® provider.
    lti.setup(
      this.configService.get<string>('LTI_KEY')!, // Secret used to sign cookies and encrypt data.
      {
        url:
          this.configService.get<string>('DATABASE_URI') +
          '/' +
          this.configService.get<string>('DATABASE_NAME') +
          '?authSource=admin',
        connection: {
          user: this.configService.get<string>('DATABASE_USERNAME')!,
          pass: this.configService.get<string>('DATABASE_PASSWORD')!,
        },
      },
      {
        appUrl: '/', // Lti Provider main url. Default: '/'.
        invalidTokenUrl: '/invalid-token',
        sessionTimeoutUrl: '/session-timeout',
        keysetUrl: '/keys', // Lti Provider public jwk keyset route. Default: '/keys'.
        loginUrl: '/login', // Lti Provider login url. Default: '/login'.
        cookies: {
          secure: false,
          sameSite: 'None',
        },
      },
    );

    lti.whitelist(
      {
        route: '/lti/nolti',
        method: 'GET',
      },
      {
        route: '/lti/ping',
        method: 'GET',
      },
    );

    // Sets the callback method called whenever theres a sucessfull connection, exposing a token object containing the decoded idToken and the usual Express route parameters (Request, Response and Next).
    lti.onConnect((token, req: Request, res: Response) => {
      if (token) {
        console.log('token::', token);
        console.log('baseUrl::', req.baseUrl);
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        res.json(res.locals?.context?.custom?.role);
      } else {
        res.redirect('/lti/nolti');
      }
    });

    // Starts listening to a given port for LTI® requests and opens connection to the configured database.
    await lti.deploy({
      serverless: true, // If true, Ltijs does not start an Express server instance. This allows usage as a middleware and with services like AWS. Ignores 'port' parameter. Default: false.
    });

    await lti.registerPlatform({
      url: this.configService.get<string>('LTI_PLATFORM_URL')!, // Platform url.
      name: this.configService.get<string>('LTI_NAME')!, // Platform nickname.
      clientId: this.configService.get<string>('LTI_CLIENT_ID')!, // Client Id generated by the platform.
      authenticationEndpoint: this.configService.get<string>(
        'LTI_AUTHENTICATION_URL',
      )!, // Authentication endpoint that the tool will use to authenticate within the platform. (Authentication request URL)
      accesstokenEndpoint: this.configService.get<string>(
        'LTI_ACCESS_TOKEN_URL',
      )!, // Access token endpoint that the tool will use to get an access token for the platform. (Access token URL)
      authConfig: {
        method: 'JWK_SET', // Method of authorization "RSA_KEY" or "JWK_KEY" or "JWK_SET".
        key: this.configService.get<string>('LTI_PUBLIC_KEYSET_URL')!, // Either the RSA public key provided by the platform, or the JWK key, or the JWK keyset address.
      },
    });
  }

  use(req: Request, res: Response, next: () => void) {
    void lti.app(req, res, next);
  }
}
